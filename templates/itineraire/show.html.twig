{% extends 'base.html.twig' %}

{% block title %}Détails de l'itinéraire{% endblock %}

{% block body %}
<div class="container mx-auto my-8 p-6 bg-white rounded-lg shadow-lg">
    <h1 class="text-3xl font-bold text-center text-gray-800 mb-6">{{ itineraire.name }}</h1>
    
    <!-- Description de l'itinéraire -->
    <div class="mb-6">
        <h2 class="text-xl font-semibold text-gray-700">Description :</h2>
        <p class="text-lg text-gray-600">{{ itineraire.description | raw }}</p>
    </div>
    
    <!-- Liste des lieux -->
    <div class="mb-6">
        <h2 class="text-xl font-semibold text-gray-700">Lieux de l'itinéraire :</h2>
        <ul class="list-disc list-inside text-gray-600">
            {% for lieu in itineraire.lieux %}
                <li class="mb-2">
                    <strong class="text-gray-800">{{ lieu.name }}</strong> - 
                    <span class="text-gray-500">{{ lieu.adresse }}</span>
                </li>
            {% else %}
                <li>Aucun lieu associé à cet itinéraire.</li>
            {% endfor %}
        </ul>
    </div>

    <!-- Carte avec itinéraire tracé -->
    <div class="mb-6">
        <h2 class="text-xl font-semibold text-gray-700 mb-4">Carte de l'itinéraire :</h2>
        <div id="map" class="w-full h-96 rounded-lg shadow-lg"></div>
    </div>
    
    <!-- Bouton retour -->
    <div class="text-center">
        <a href="{{ path('app_itineraire') }}" class="inline-block px-6 py-2 text-white bg-blue-500 hover:bg-blue-700 rounded-md shadow-lg">
            Retour à la liste des itinéraires
        </a>
    </div>
</div>

<script>
    var map = L.map('map').setView([45.4397, 4.3872], 13);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    // Tableau pour les lieux de l'itinéraire
    const lieux = {{ lieux|json_encode|raw }};
    const itineraireLieux = {{ itineraire.lieux|json_encode|raw }};
    let markers = []; // Tableau pour stocker les marqueurs Leaflet

    // Ajouter les lieux à la carte
    itineraireLieux.forEach(lieuId => {
        const lieu = lieux.find(l => l.id === lieuId);
        if (lieu && lieu.latitude && lieu.longitude) {
            let marker = L.marker([lieu.latitude, lieu.longitude]).addTo(map)
                .bindPopup(`<b>${lieu.name}</b><br>${lieu.adresse}`);
            markers.push(marker);
        }
    });

    // Tracer les itinéraires (lignes entre les lieux)
    const latLngs = itineraireLieux.map(lieuId => {
        const lieu = lieux.find(l => l.id === lieuId);
        return [lieu.latitude, lieu.longitude];
    });
    const polyline = L.polyline(latLngs, {color: 'blue'}).addTo(map);
    map.fitBounds(polyline.getBounds());
</script>
{% endblock %}
